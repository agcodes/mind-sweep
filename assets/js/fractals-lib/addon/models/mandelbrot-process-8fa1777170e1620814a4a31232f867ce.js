import FractalProcess from"./fractal-process";export default class MandelbrotProcess extends FractalProcess{constructor(){super()}getRandomPoints(){this.fractal.getRandomPoints(3e3,!1)}defGrid(){!0===this.params.autoAdjust?(this.pts=this.gridAdapter.getPointsOnPlan(this.fractal.ptsTmp,!0,this.margin,null,!1,0===this.params.dW,[1.07,1.07,0,0]),this.fractal.ptsTmp=null):this.pts=this.gridAdapter.getPointsOnPlan(this.params.getInterval(),!0,this.margin,0,!1,!0,[1,1,1]),this.gridAdapter.defGridLimit(this.pts)}getPts(t){const s=[];for(let r=0;r<t;r++){const t=this.gridAdapter.getNewPoint(1,!0);if(null===t)return s;const r=this.getPt([t[0],t[1]]);r?0!==this.params.animation.z0?s.push([t[0],t[1],12*this.params.z0,r[3],r[4]]):0!==this.params.d3?s.push(this.gridAdapter.addZ([t[0],t[1],r[2],r[3]],this.params.d3)):s.push([t[0],t[1],this.params.render3D?r[2]:null,r[3],r[4]]):!1===this.gridAdapter.getEndGrid()&&this.gridAdapter.skipPts(2)}return s}getPt(t){if(this.gridAdapter.isInCoordLimits(t)){const s=this.gridAdapter.getPointFromPlan(t,!1,8);return this.nbPts++,this.fractal.getPt(s[0],s[1],this.params.z0,this.params.d3,t,this.recycle)}return null}}