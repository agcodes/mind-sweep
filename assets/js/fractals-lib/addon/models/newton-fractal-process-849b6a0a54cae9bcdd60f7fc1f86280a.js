import FractalProcess from"./fractal-process";export default class NewtonFractalProcess extends FractalProcess{constructor(){super(),this._jobs=[],this._jobsInProgress=0,this._nbWorkers=3,this.dataParams=[],this.canvasService=null}setData(s){this.dataParams=s;const t=this;this._jobs=[];for(let s=0;s<this._nbWorkers;s++)this._jobs[s]={worker:new Worker("assets/js/newton-fractal-worker.bundle-74c25bb58c0221ad3659e03e25072cfe.js",{type:"module"}),status:0,params:null},this._jobs[s].worker.addEventListener("message",(function(s){t.jobHandler(s)}),!1)}defGrid(){this.gridAdapter.defParameters(this.params.getInterval(),[0,0])}getPts(){const s=[],t=(this.params.ifsParams&&this.params.ifsParams.mode,1e4);for(let r=0;r<t;r++){const t=this.gridAdapter.getNewPoint(0);if(null!=t){const r=this.gridAdapter.getPointFromPlan(t,!1,10),a=this.fractal.getPt(r[0],r[1]);null!=a&&s.push([t[0],t[1],a[2],a[3],a[4]])}}return this.getPtsWithWorker(),s}getPtsWithWorker(){if(this._jobsInProgress<1)for(let s=0;s<this._nbWorkers;s++){const t=[],r=[],a=this.params.ifsParams&&this.params.ifsParams.mode>0?2e3:1e4;for(let s=0;s<a;s++){const s=this.gridAdapter.getNewPoint(0),a=this.gridAdapter.getPointFromPlan(s,!1,10);null!=s&&(r.push(s),t.push(a))}this._jobs[s].ptsCanvas=r,this._jobs[s].params={pts:t,ptsCanvas:r,i:s,data:this.dataParams},this._jobsInProgress++,this._jobs[s].worker.postMessage(this._jobs[s].params)}}jobHandler(s){const t=JSON.parse(s.data);if(t){for(let s=0;s<t.length;s++)if(t[s]&&t[s][5]){const r=t[s][4],a=t[s][5],e=this.params.getDrColor(r,a,a,a,a,a);t[s][3]=e}t.length>0&&this.canvasService.processCanvas.addPointsInData(t,null,1)}this._jobsInProgress--}getPts_(){}}