import CComplex from"./CComplex";import MersenneTwister from"calc-utils/models/MersenneTwister";import JuliaStarParameters from"./julia-star-parameters";import Fractal from"./fractal";class JuliaStar extends Fractal{constructor(){super(),this.x=0,this.y=0,this.indice=0,this.mersenneTwister=new MersenneTwister,this.params=new JuliaStarParameters}reset(){this.x=0,this.y=0,this.params.setComplexes()}initialize(){this.reset()}getPoints(s){return Array.from({length:s},(()=>{const s=this.getPoint(this.x,this.y);return this.x=s[0],this.y=s[1],this.indice++,[s[0],s[1],0,s[3]]}))}setParameters(s){this.params=s}getPoint(s,t){const r=this.params.a;let e=new CComplex(s,t);if(1==this.params.altC2_3_4){const s=this.mersenneTwister.rand();e=s<1/3?e.add(this.params.c2):s<2/3?e.add(this.params.c3):e.add(this.params.c4)}else 1==this.params.altC2_3&&(e=e.add(this.mersenneTwister.rand()>.5?this.params.c2:this.params.c3));0!==r&&(e=e.mulReal(r)),e=e.add(this.params.c1);const a=e.getArgument();e=this.params.currentFunction(e,this.params);let i=0,n=0;if(this.params.altC)this.mersenneTwister.rand()>.5?(i=e.r,n=e.i):(i=-1*e.r,n=-1*e.i);else{const s=Math.cos(this.params.base*a),t=Math.sin(this.params.base*a);if(this.params.randomS){const r=(Math.floor(9999*this.mersenneTwister.rand())+1)%2*2-1;this.mersenneTwister.rand()<.5?(i=-r*s-e.r,n=r*t-e.i):(i=-r*s+e.r,n=r*t+e.i)}else this.mersenneTwister.rand()<.5?(i=-s-e.r,n=-t+e.i):(i=-s+e.r,n=-t-e.i)}return[i,n,0,null]}}export default JuliaStar;